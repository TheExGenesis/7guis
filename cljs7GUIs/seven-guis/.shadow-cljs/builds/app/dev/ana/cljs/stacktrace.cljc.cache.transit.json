["^ ","~:output",["^ ","~:js","goog.provide('cljs.stacktrace');\nif((typeof cljs !== 'undefined') && (typeof cljs.stacktrace !== 'undefined') && (typeof cljs.stacktrace.parse_stacktrace !== 'undefined')){\n} else {\n/**\n * Parse a JavaScript stacktrace string into a canonical data form. The\n *   arguments:\n * \n *   repl-env - the repl environment, an optional map with :host and :port keys\n *           if the stacktrace includes url, not file references\n *   st       - the original stacktrace string to parse\n *   err      - an error map. :ua-product key defines the type of stacktrace parser\n *           to use, for example :chrome\n *   opts     - additional options. :output-dir maybe given in this argument if\n *           :host and :port do not apply, for example, a file path\n * \n *   The canonical stacktrace representation can easily be mapped to a\n *   ClojureScript one see mapped-stacktrace and mapped-stacktrace-str\n */\ncljs.stacktrace.parse_stacktrace = (function (){var method_table__4654__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__4655__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__4656__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__4657__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__4658__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__27242 = cljs.core.get_global_hierarchy;\nreturn (fexpr__27242.cljs$core$IFn$_invoke$arity$0 ? fexpr__27242.cljs$core$IFn$_invoke$arity$0() : fexpr__27242.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"cljs.stacktrace\",\"parse-stacktrace\"),(function (repl_env,st,err,opts){\nreturn new cljs.core.Keyword(null,\"ua-product\",\"ua-product\",938384227).cljs$core$IFn$_invoke$arity$1(err);\n}),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__4658__auto__,method_table__4654__auto__,prefer_table__4655__auto__,method_cache__4656__auto__,cached_hierarchy__4657__auto__));\n})();\n}\ncljs.stacktrace.parse_int = (function cljs$stacktrace$parse_int(s){\nreturn parseInt(s,(10));\n});\ncljs.stacktrace.starts_with_QMARK_ = (function cljs$stacktrace$starts_with_QMARK_(s0,s1){\nreturn goog.string.startsWith(s0,s1);\n});\ncljs.stacktrace.ends_with_QMARK_ = (function cljs$stacktrace$ends_with_QMARK_(s0,s1){\nreturn goog.string.endsWith(s0,s1);\n});\ncljs.stacktrace.string__GT_regex = (function cljs$stacktrace$string__GT_regex(s){\nreturn (new RegExp(s));\n});\ncljs.stacktrace.output_directory = (function cljs$stacktrace$output_directory(opts){\nvar or__4160__auto__ = new cljs.core.Keyword(null,\"output-dir\",\"output-dir\",-290956991).cljs$core$IFn$_invoke$arity$1(opts);\nif(cljs.core.truth_(or__4160__auto__)){\nreturn or__4160__auto__;\n} else {\nreturn \"out\";\n}\n});\ncljs.stacktrace.parse_stacktrace.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (repl_env,st,err,opts){\nreturn st;\n}));\ncljs.stacktrace.parse_file_line_column = (function cljs$stacktrace$parse_file_line_column(flc){\nif(cljs.core.not(cljs.core.re_find(/:/,flc))){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [flc,null,null], null);\n} else {\nvar xs = clojure.string.split.cljs$core$IFn$_invoke$arity$2(flc,/:/);\nvar vec__27300 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p__27319,p__27320){\nvar vec__27322 = p__27319;\nvar pre = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27322,(0),null);\nvar post = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27322,(1),null);\nvar vec__27325 = p__27320;\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27325,(0),null);\nvar i = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27325,(1),null);\nif((i <= (2))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pre,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(post,x)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.conj.cljs$core$IFn$_invoke$arity$2(pre,x),post], null);\n}\n}),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY,cljs.core.PersistentVector.EMPTY], null),cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,xs,cljs.core.range.cljs$core$IFn$_invoke$arity$3(cljs.core.count(xs),(0),(-1))));\nvar pre = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27300,(0),null);\nvar vec__27303 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27300,(1),null);\nvar line = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27303,(0),null);\nvar column = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27303,(1),null);\nvar file = clojure.string.join.cljs$core$IFn$_invoke$arity$2(\":\",pre);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__27339 = file;\nif(cljs.stacktrace.starts_with_QMARK_(file,\"(\")){\nreturn clojure.string.replace(G__27339,\"(\",\"\");\n} else {\nreturn G__27339;\n}\n})(),cljs.stacktrace.parse_int((function (){var G__27342 = line;\nif(cljs.stacktrace.ends_with_QMARK_(line,\")\")){\nreturn clojure.string.replace(G__27342,\")\",\"\");\n} else {\nreturn G__27342;\n}\n})()),cljs.stacktrace.parse_int((function (){var G__27345 = column;\nif(cljs.stacktrace.ends_with_QMARK_(column,\")\")){\nreturn clojure.string.replace(G__27345,\")\",\"\");\n} else {\nreturn G__27345;\n}\n})())], null);\n}\n});\n/**\n * Given a browser file url convert it into a relative path that can be used\n * to locate the original source.\n */\ncljs.stacktrace.parse_file = (function cljs$stacktrace$parse_file(p__27351,file,p__27352){\nvar map__27355 = p__27351;\nvar map__27355__$1 = cljs.core.__destructure_map(map__27355);\nvar repl_env = map__27355__$1;\nvar host = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27355__$1,new cljs.core.Keyword(null,\"host\",\"host\",-1558485167));\nvar host_port = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27355__$1,new cljs.core.Keyword(null,\"host-port\",\"host-port\",1956551772));\nvar port = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27355__$1,new cljs.core.Keyword(null,\"port\",\"port\",1534937262));\nvar map__27356 = p__27352;\nvar map__27356__$1 = cljs.core.__destructure_map(map__27356);\nvar opts = map__27356__$1;\nvar asset_path = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27356__$1,new cljs.core.Keyword(null,\"asset-path\",\"asset-path\",1500889617));\nvar urlpat = (cljs.core.truth_(host)?cljs.stacktrace.string__GT_regex([\"http://\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(host),\":\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var or__4160__auto__ = host_port;\nif(cljs.core.truth_(or__4160__auto__)){\nreturn or__4160__auto__;\n} else {\nreturn port;\n}\n})()),\"/\"].join('')):\"\");\nvar match = (cljs.core.truth_(host)?cljs.core.re_find(urlpat,file):cljs.core.contains_QMARK_(opts,new cljs.core.Keyword(null,\"output-dir\",\"output-dir\",-290956991)));\nif(cljs.core.truth_(match)){\nreturn clojure.string.replace(clojure.string.replace(file,urlpat,\"\"),cljs.stacktrace.string__GT_regex([\"^\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var or__4160__auto__ = (function (){var and__4149__auto__ = asset_path;\nif(cljs.core.truth_(and__4149__auto__)){\nreturn clojure.string.replace(asset_path,/^\\//,\"\");\n} else {\nreturn and__4149__auto__;\n}\n})();\nif(cljs.core.truth_(or__4160__auto__)){\nreturn or__4160__auto__;\n} else {\nreturn cljs.stacktrace.output_directory(opts);\n}\n})()),\"/\"].join('')),\"\");\n} else {\nvar temp__5733__auto__ = new cljs.core.Keyword(null,\"asset-root\",\"asset-root\",1771735072).cljs$core$IFn$_invoke$arity$1(opts);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar asset_root = temp__5733__auto__;\nreturn clojure.string.replace(file,asset_root,\"\");\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Could not relativize URL \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(file)].join(''),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"parse-stacktrace\",\"parse-stacktrace\",-38208461),new cljs.core.Keyword(null,\"reason\",\"reason\",-2070751759),new cljs.core.Keyword(null,\"relativize-url\",\"relativize-url\",621482324)], null));\n}\n}\n});\ncljs.stacktrace.chrome_st_el__GT_frame = (function cljs$stacktrace$chrome_st_el__GT_frame(repl_env,st_el,opts){\nvar xs = clojure.string.split.cljs$core$IFn$_invoke$arity$2(clojure.string.replace(st_el,/\\s+at\\s+/,\"\"),/\\s+/);\nvar vec__27379 = ((((1) === cljs.core.count(xs)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,cljs.core.first(xs)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(xs),cljs.core.last(xs)], null));\nvar function$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27379,(0),null);\nvar flc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27379,(1),null);\nvar vec__27382 = cljs.stacktrace.parse_file_line_column(flc);\nvar file = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27382,(0),null);\nvar line = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27382,(1),null);\nvar column = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27382,(2),null);\nif(cljs.core.truth_((function (){var and__4149__auto__ = file;\nif(cljs.core.truth_(and__4149__auto__)){\nvar and__4149__auto____$1 = function$;\nif(cljs.core.truth_(and__4149__auto____$1)){\nvar and__4149__auto____$2 = line;\nif(cljs.core.truth_(and__4149__auto____$2)){\nreturn column;\n} else {\nreturn and__4149__auto____$2;\n}\n} else {\nreturn and__4149__auto____$1;\n}\n} else {\nreturn and__4149__auto__;\n}\n})())){\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),cljs.stacktrace.parse_file(repl_env,file,opts),new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),clojure.string.replace(function$,/Object\\./,\"\"),new cljs.core.Keyword(null,\"line\",\"line\",212345235),line,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),column], null);\n} else {\nif(clojure.string.blank_QMARK_(function$)){\nreturn null;\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),null,new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),clojure.string.replace(function$,/Object\\./,\"\"),new cljs.core.Keyword(null,\"line\",\"line\",212345235),null,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),null], null);\n}\n}\n});\ncljs.stacktrace.parse_stacktrace.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"chrome\",\"chrome\",1718738387),(function (repl_env,st,err,opts){\nreturn cljs.core.vec(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__27408_SHARP_){\nreturn cljs.stacktrace.chrome_st_el__GT_frame(repl_env,p1__27408_SHARP_,opts);\n}),cljs.core.take_while.cljs$core$IFn$_invoke$arity$2((function (p1__27407_SHARP_){\nreturn (!(cljs.stacktrace.starts_with_QMARK_(p1__27407_SHARP_,\"    at eval\")));\n}),cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2((function (p1__27406_SHARP_){\nreturn cljs.stacktrace.starts_with_QMARK_(p1__27406_SHARP_,\"Error\");\n}),clojure.string.split_lines(st))))));\n}));\ncljs.stacktrace.safari_st_el__GT_frame = (function cljs$stacktrace$safari_st_el__GT_frame(repl_env,st_el,opts){\nvar vec__27425 = (cljs.core.truth_(cljs.core.re_find(/@/,st_el))?clojure.string.split.cljs$core$IFn$_invoke$arity$2(st_el,/@/):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,st_el], null));\nvar function$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27425,(0),null);\nvar flc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27425,(1),null);\nvar vec__27428 = cljs.stacktrace.parse_file_line_column(flc);\nvar file = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27428,(0),null);\nvar line = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27428,(1),null);\nvar column = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27428,(2),null);\nif(cljs.core.truth_((function (){var and__4149__auto__ = file;\nif(cljs.core.truth_(and__4149__auto__)){\nvar and__4149__auto____$1 = function$;\nif(cljs.core.truth_(and__4149__auto____$1)){\nvar and__4149__auto____$2 = line;\nif(cljs.core.truth_(and__4149__auto____$2)){\nreturn column;\n} else {\nreturn and__4149__auto____$2;\n}\n} else {\nreturn and__4149__auto____$1;\n}\n} else {\nreturn and__4149__auto__;\n}\n})())){\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),cljs.stacktrace.parse_file(repl_env,file,opts),new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),clojure.string.trim(function$),new cljs.core.Keyword(null,\"line\",\"line\",212345235),line,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),column], null);\n} else {\nif(clojure.string.blank_QMARK_(function$)){\nreturn null;\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),null,new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),clojure.string.trim(function$),new cljs.core.Keyword(null,\"line\",\"line\",212345235),null,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),null], null);\n}\n}\n});\ncljs.stacktrace.parse_stacktrace.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"safari\",\"safari\",497115653),(function (repl_env,st,err,opts){\nreturn cljs.core.vec(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__27445_SHARP_){\nreturn cljs.stacktrace.safari_st_el__GT_frame(repl_env,p1__27445_SHARP_,opts);\n}),cljs.core.remove.cljs$core$IFn$_invoke$arity$2(clojure.string.blank_QMARK_,cljs.core.take_while.cljs$core$IFn$_invoke$arity$2((function (p1__27444_SHARP_){\nreturn (!(cljs.stacktrace.starts_with_QMARK_(p1__27444_SHARP_,\"eval code\")));\n}),cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2((function (p1__27443_SHARP_){\nreturn cljs.stacktrace.starts_with_QMARK_(p1__27443_SHARP_,\"Error\");\n}),clojure.string.split_lines(st)))))));\n}));\ncljs.stacktrace.firefox_clean_function = (function cljs$stacktrace$firefox_clean_function(f){\nvar f__$1 = f;\nvar f__$2 = ((clojure.string.blank_QMARK_(f__$1))?null:((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(f__$1.indexOf(\"</\"),(-1)))?(function (){var idx = f__$1.indexOf(\"</\");\nreturn f__$1.substring((idx + (2)));\n})():f__$1\n));\nreturn clojure.string.replace(clojure.string.replace(f__$2,/</,\"\"),(new RegExp(\"\\\\/\")),\"\");\n});\ncljs.stacktrace.firefox_st_el__GT_frame = (function cljs$stacktrace$firefox_st_el__GT_frame(repl_env,st_el,opts){\nvar vec__27470 = (cljs.core.truth_(cljs.core.re_find(/@/,st_el))?clojure.string.split.cljs$core$IFn$_invoke$arity$2(st_el,/@/):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,st_el], null));\nvar function$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27470,(0),null);\nvar flc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27470,(1),null);\nvar vec__27473 = cljs.stacktrace.parse_file_line_column(flc);\nvar file = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27473,(0),null);\nvar line = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27473,(1),null);\nvar column = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27473,(2),null);\nif(cljs.core.truth_((function (){var and__4149__auto__ = file;\nif(cljs.core.truth_(and__4149__auto__)){\nvar and__4149__auto____$1 = function$;\nif(cljs.core.truth_(and__4149__auto____$1)){\nvar and__4149__auto____$2 = line;\nif(cljs.core.truth_(and__4149__auto____$2)){\nreturn column;\n} else {\nreturn and__4149__auto____$2;\n}\n} else {\nreturn and__4149__auto____$1;\n}\n} else {\nreturn and__4149__auto__;\n}\n})())){\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),cljs.stacktrace.parse_file(repl_env,file,opts),new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),cljs.stacktrace.firefox_clean_function(function$),new cljs.core.Keyword(null,\"line\",\"line\",212345235),line,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),column], null);\n} else {\nif(clojure.string.blank_QMARK_(function$)){\nreturn null;\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),null,new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),cljs.stacktrace.firefox_clean_function(function$),new cljs.core.Keyword(null,\"line\",\"line\",212345235),null,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),null], null);\n}\n}\n});\ncljs.stacktrace.parse_stacktrace.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"firefox\",\"firefox\",1283768880),(function (repl_env,st,err,opts){\nreturn cljs.core.vec(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__27502_SHARP_){\nreturn cljs.stacktrace.firefox_st_el__GT_frame(repl_env,p1__27502_SHARP_,opts);\n}),cljs.core.remove.cljs$core$IFn$_invoke$arity$2(clojure.string.blank_QMARK_,cljs.core.take_while.cljs$core$IFn$_invoke$arity$2((function (p1__27496_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(p1__27496_SHARP_.indexOf(\"> eval\"),(-1));\n}),cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2((function (p1__27494_SHARP_){\nreturn cljs.stacktrace.starts_with_QMARK_(p1__27494_SHARP_,\"Error\");\n}),clojure.string.split_lines(st)))))));\n}));\ncljs.stacktrace.parse_stacktrace.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"nodejs\",\"nodejs\",321212524),(function (repl_env,st,err,p__27522){\nvar map__27524 = p__27522;\nvar map__27524__$1 = cljs.core.__destructure_map(map__27524);\nvar opts = map__27524__$1;\nvar output_dir = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27524__$1,new cljs.core.Keyword(null,\"output-dir\",\"output-dir\",-290956991));\nvar parse_source_loc_info = (function cljs$stacktrace$parse_source_loc_info(x){\nif(cljs.core.truth_((function (){var and__4149__auto__ = x;\nif(cljs.core.truth_(and__4149__auto__)){\nreturn (!(clojure.string.blank_QMARK_(x)));\n} else {\nreturn and__4149__auto__;\n}\n})())){\nreturn cljs.stacktrace.parse_int(x);\n} else {\nreturn null;\n}\n});\nvar process_frame = (function cljs$stacktrace$process_frame(frame_str){\nif(((clojure.string.blank_QMARK_(frame_str)) || ((cljs.core.re_find(/^\\s+at/,frame_str) == null)))){\nreturn null;\n} else {\nvar frame_str__$1 = clojure.string.replace(frame_str,/\\s+at\\s+/,\"\");\nif(clojure.string.starts_with_QMARK_(frame_str__$1,\"repl:\")){\nreturn null;\n} else {\nvar parts = clojure.string.split.cljs$core$IFn$_invoke$arity$2(frame_str__$1,/\\s+/);\nvar vec__27582 = ((((2) === cljs.core.count(parts)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(parts),cljs.core.subs.cljs$core$IFn$_invoke$arity$3(cljs.core.second(parts),(1),(cljs.core.count(cljs.core.second(parts)) - (1)))], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,cljs.core.first(parts)], null));\nvar function$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27582,(0),null);\nvar file_AMPERSAND_line = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27582,(1),null);\nvar vec__27585 = clojure.string.split.cljs$core$IFn$_invoke$arity$2(file_AMPERSAND_line,/:/);\nvar file_part = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27585,(0),null);\nvar line_part = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27585,(1),null);\nvar col_part = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27585,(2),null);\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),(cljs.core.truth_(function$)?(function (){var G__27594 = file_part;\nif(cljs.core.truth_(output_dir)){\nreturn clojure.string.replace(G__27594,[cljs.core.str.cljs$core$IFn$_invoke$arity$1(output_dir),\"/\"].join(''),\"\");\n} else {\nreturn G__27594;\n}\n})():file_part),new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),function$,new cljs.core.Keyword(null,\"line\",\"line\",212345235),parse_source_loc_info(line_part),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),parse_source_loc_info(col_part)], null);\n}\n}\n});\nreturn cljs.core.vec(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2(process_frame,clojure.string.split.cljs$core$IFn$_invoke$arity$2(st,/\\n/))));\n}));\ncljs.stacktrace.remove_ext = (function cljs$stacktrace$remove_ext(file){\nreturn clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(file,/\\.js$/,\"\"),/\\.cljs$/,\"\"),/\\.cljc$/,\"\"),/\\.clj$/,\"\");\n});\n/**\n * Given a cljs.source-map source map data structure map a generated line\n * and column back to the original line, column, and function called.\n */\ncljs.stacktrace.mapped_line_column_call = (function cljs$stacktrace$mapped_line_column_call(sms,file,line,column){\nvar source_map = cljs.core.get.cljs$core$IFn$_invoke$arity$2(sms,cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(clojure.string.replace(cljs.stacktrace.remove_ext(file),\"/\",\".\")));\nvar get_best_column = (function cljs$stacktrace$mapped_line_column_call_$_get_best_column(columns,column__$1){\nreturn cljs.core.last((function (){var or__4160__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(columns,cljs.core.last(cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__27606_SHARP_){\nreturn (p1__27606_SHARP_ <= (column__$1 - (1)));\n}),cljs.core.sort.cljs$core$IFn$_invoke$arity$1(cljs.core.keys(columns)))));\nif(cljs.core.truth_(or__4160__auto__)){\nreturn or__4160__auto__;\n} else {\nreturn cljs.core.second(cljs.core.first(columns));\n}\n})());\n});\nvar adjust = (function cljs$stacktrace$mapped_line_column_call_$_adjust(mapped){\nreturn cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$3((function (p1__27607_SHARP_,p2__27608_SHARP_){\nreturn (p1__27607_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__27607_SHARP_.cljs$core$IFn$_invoke$arity$1(p2__27608_SHARP_) : p1__27607_SHARP_.call(null,p2__27608_SHARP_));\n}),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.inc,cljs.core.inc,cljs.core.identity], null),mapped));\n});\nvar default$ = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [line,column,null], null);\nvar temp__5733__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(source_map,(line - (1)));\nif(cljs.core.truth_(temp__5733__auto__)){\nvar columns = temp__5733__auto__;\nreturn adjust(cljs.core.map.cljs$core$IFn$_invoke$arity$2(get_best_column(columns,column),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"col\",\"col\",-1959363084),new cljs.core.Keyword(null,\"name\",\"name\",1843675177)], null)));\n} else {\nreturn default$;\n}\n});\n/**\n * Given opts and a canonicalized JavaScript stacktrace frame, return the\n *   ClojureScript frame.\n */\ncljs.stacktrace.mapped_frame = (function cljs$stacktrace$mapped_frame(p__27632,sms,opts){\nvar map__27634 = p__27632;\nvar map__27634__$1 = cljs.core.__destructure_map(map__27634);\nvar function$ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27634__$1,new cljs.core.Keyword(null,\"function\",\"function\",-2127255473));\nvar file = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27634__$1,new cljs.core.Keyword(null,\"file\",\"file\",-1269645878));\nvar line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27634__$1,new cljs.core.Keyword(null,\"line\",\"line\",212345235));\nvar column = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27634__$1,new cljs.core.Keyword(null,\"column\",\"column\",2078222095));\nvar no_source_file_QMARK_ = ((cljs.core.not(file))?true:cljs.stacktrace.starts_with_QMARK_(file,\"<\"));\nvar vec__27636 = ((no_source_file_QMARK_)?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [line,column,null], null):cljs.stacktrace.mapped_line_column_call(sms,file,line,column));\nvar line_SINGLEQUOTE_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27636,(0),null);\nvar column_SINGLEQUOTE_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27636,(1),null);\nvar call = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27636,(2),null);\nvar file_SINGLEQUOTE_ = ((no_source_file_QMARK_)?null:((cljs.stacktrace.ends_with_QMARK_(file,\".js\"))?[cljs.core.subs.cljs$core$IFn$_invoke$arity$3(file,(0),(cljs.core.count(file) - (3))),\".cljs\"].join(''):file));\nreturn new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),function$,new cljs.core.Keyword(null,\"call\",\"call\",-519999866),call,new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),((no_source_file_QMARK_)?[\"NO_SOURCE_FILE\",(cljs.core.truth_(file)?[\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(file)].join(''):null)].join(''):file_SINGLEQUOTE_),new cljs.core.Keyword(null,\"line\",\"line\",212345235),line_SINGLEQUOTE_,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),column_SINGLEQUOTE_], null);\n});\n/**\n * Given a vector representing the canonicalized JavaScript stacktrace\n * return the ClojureScript stacktrace. The canonical stacktrace must be\n * in the form:\n * \n *  [{:file <string>\n *    :function <string>\n *    :line <integer>\n *    :column <integer>}*]\n * \n * :file must be a URL path (without protocol) relative to :output-dir or a\n * identifier delimited by angle brackets. The returned mapped stacktrace will\n * also contain :url entries to the original sources if it can be determined\n * from the classpath.\n */\ncljs.stacktrace.mapped_stacktrace = (function cljs$stacktrace$mapped_stacktrace(var_args){\nvar G__27647 = arguments.length;\nswitch (G__27647) {\ncase 2:\nreturn cljs.stacktrace.mapped_stacktrace.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn cljs.stacktrace.mapped_stacktrace.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(cljs.stacktrace.mapped_stacktrace.cljs$core$IFn$_invoke$arity$2 = (function (stacktrace,sms){\nreturn cljs.stacktrace.mapped_stacktrace.cljs$core$IFn$_invoke$arity$3(stacktrace,sms,null);\n}));\n\n(cljs.stacktrace.mapped_stacktrace.cljs$core$IFn$_invoke$arity$3 = (function (stacktrace,sms,opts){\nvar call__GT_function = (function cljs$stacktrace$call__GT_function(x){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"call\",\"call\",-519999866).cljs$core$IFn$_invoke$arity$1(x))){\nreturn cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"function\",\"function\",-2127255473)],[new cljs.core.Keyword(null,\"call\",\"call\",-519999866).cljs$core$IFn$_invoke$arity$1(x)]);\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n});\nvar call_merge = (function cljs$stacktrace$call_merge(function$,call){\nreturn cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic((function (munged_fn_name,unmunged_call_name){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(munged_fn_name,clojure.string.replace(cljs.core.munge(unmunged_call_name),\".\",\"$\"))){\nreturn unmunged_call_name;\n} else {\nreturn munged_fn_name;\n}\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([function$,call], 0));\n});\nvar mapped_frames = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.memoize((function (p1__27643_SHARP_){\nreturn cljs.stacktrace.mapped_frame(p1__27643_SHARP_,sms,opts);\n})),stacktrace);\nreturn cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$3(call_merge,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__27644_SHARP_){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(p1__27644_SHARP_,new cljs.core.Keyword(null,\"call\",\"call\",-519999866));\n}),mapped_frames),cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(cljs.core.map.cljs$core$IFn$_invoke$arity$2(call__GT_function,mapped_frames)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentArrayMap.EMPTY], null))));\n}));\n\n(cljs.stacktrace.mapped_stacktrace.cljs$lang$maxFixedArity = 3);\n\n/**\n * Given a vector representing the canonicalized JavaScript stacktrace and a map\n *   of library names to decoded source maps, print the ClojureScript stacktrace .\n *   See mapped-stacktrace.\n */\ncljs.stacktrace.mapped_stacktrace_str = (function cljs$stacktrace$mapped_stacktrace_str(var_args){\nvar G__27680 = arguments.length;\nswitch (G__27680) {\ncase 2:\nreturn cljs.stacktrace.mapped_stacktrace_str.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn cljs.stacktrace.mapped_stacktrace_str.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(cljs.stacktrace.mapped_stacktrace_str.cljs$core$IFn$_invoke$arity$2 = (function (stacktrace,sms){\nreturn cljs.stacktrace.mapped_stacktrace_str.cljs$core$IFn$_invoke$arity$3(stacktrace,sms,null);\n}));\n\n(cljs.stacktrace.mapped_stacktrace_str.cljs$core$IFn$_invoke$arity$3 = (function (stacktrace,sms,opts){\nvar sb__4702__auto__ = (new goog.string.StringBuffer());\nvar _STAR_print_newline_STAR__orig_val__27689_27935 = cljs.core._STAR_print_newline_STAR_;\nvar _STAR_print_fn_STAR__orig_val__27690_27936 = cljs.core._STAR_print_fn_STAR_;\nvar _STAR_print_newline_STAR__temp_val__27691_27937 = true;\nvar _STAR_print_fn_STAR__temp_val__27692_27938 = (function (x__4703__auto__){\nreturn sb__4702__auto__.append(x__4703__auto__);\n});\n(cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR__temp_val__27691_27937);\n\n(cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__temp_val__27692_27938);\n\ntry{var seq__27693_27944 = cljs.core.seq(cljs.stacktrace.mapped_stacktrace.cljs$core$IFn$_invoke$arity$3(stacktrace,sms,opts));\nvar chunk__27694_27945 = null;\nvar count__27695_27946 = (0);\nvar i__27696_27947 = (0);\nwhile(true){\nif((i__27696_27947 < count__27695_27946)){\nvar map__27739_27949 = chunk__27694_27945.cljs$core$IIndexed$_nth$arity$2(null,i__27696_27947);\nvar map__27739_27950__$1 = cljs.core.__destructure_map(map__27739_27949);\nvar function_27951 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27739_27950__$1,new cljs.core.Keyword(null,\"function\",\"function\",-2127255473));\nvar file_27952 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27739_27950__$1,new cljs.core.Keyword(null,\"file\",\"file\",-1269645878));\nvar line_27953 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27739_27950__$1,new cljs.core.Keyword(null,\"line\",\"line\",212345235));\nvar column_27954 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27739_27950__$1,new cljs.core.Keyword(null,\"column\",\"column\",2078222095));\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"\\t\",[(cljs.core.truth_(function_27951)?[cljs.core.str.cljs$core$IFn$_invoke$arity$1(function_27951),\" \"].join(''):null),\"(\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(file_27952),(cljs.core.truth_(line_27953)?[\":\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(line_27953)].join(''):null),(cljs.core.truth_(column_27954)?[\":\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(column_27954)].join(''):null),\")\"].join('')], 0));\n\n\nvar G__27960 = seq__27693_27944;\nvar G__27961 = chunk__27694_27945;\nvar G__27962 = count__27695_27946;\nvar G__27963 = (i__27696_27947 + (1));\nseq__27693_27944 = G__27960;\nchunk__27694_27945 = G__27961;\ncount__27695_27946 = G__27962;\ni__27696_27947 = G__27963;\ncontinue;\n} else {\nvar temp__5735__auto___27969 = cljs.core.seq(seq__27693_27944);\nif(temp__5735__auto___27969){\nvar seq__27693_27970__$1 = temp__5735__auto___27969;\nif(cljs.core.chunked_seq_QMARK_(seq__27693_27970__$1)){\nvar c__4591__auto___27972 = cljs.core.chunk_first(seq__27693_27970__$1);\nvar G__27973 = cljs.core.chunk_rest(seq__27693_27970__$1);\nvar G__27974 = c__4591__auto___27972;\nvar G__27975 = cljs.core.count(c__4591__auto___27972);\nvar G__27976 = (0);\nseq__27693_27944 = G__27973;\nchunk__27694_27945 = G__27974;\ncount__27695_27946 = G__27975;\ni__27696_27947 = G__27976;\ncontinue;\n} else {\nvar map__27759_27978 = cljs.core.first(seq__27693_27970__$1);\nvar map__27759_27979__$1 = cljs.core.__destructure_map(map__27759_27978);\nvar function_27980 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27759_27979__$1,new cljs.core.Keyword(null,\"function\",\"function\",-2127255473));\nvar file_27981 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27759_27979__$1,new cljs.core.Keyword(null,\"file\",\"file\",-1269645878));\nvar line_27982 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27759_27979__$1,new cljs.core.Keyword(null,\"line\",\"line\",212345235));\nvar column_27983 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27759_27979__$1,new cljs.core.Keyword(null,\"column\",\"column\",2078222095));\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"\\t\",[(cljs.core.truth_(function_27980)?[cljs.core.str.cljs$core$IFn$_invoke$arity$1(function_27980),\" \"].join(''):null),\"(\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(file_27981),(cljs.core.truth_(line_27982)?[\":\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(line_27982)].join(''):null),(cljs.core.truth_(column_27983)?[\":\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(column_27983)].join(''):null),\")\"].join('')], 0));\n\n\nvar G__27989 = cljs.core.next(seq__27693_27970__$1);\nvar G__27990 = null;\nvar G__27991 = (0);\nvar G__27992 = (0);\nseq__27693_27944 = G__27989;\nchunk__27694_27945 = G__27990;\ncount__27695_27946 = G__27991;\ni__27696_27947 = G__27992;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n}finally {(cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__orig_val__27690_27936);\n\n(cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR__orig_val__27689_27935);\n}\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4702__auto__);\n}));\n\n(cljs.stacktrace.mapped_stacktrace_str.cljs$lang$maxFixedArity = 3);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","cljs/stacktrace.cljc","~:line",9,"~:column",5,"~:end-line",9,"~:end-column",20],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$cljs.stacktrace","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$goog.string","^O","~$gstring","^O","~$clojure.string","^Q","~$string","^Q","~$cljs.core","^S","~$goog","^T"],"~:seen",["^H",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^S","^S"],"~:form",["~#list",["~$ns","^J",["^Z",["^V",["^O","~:as","^P"],["^Q","^10","^R"]]]]],"~:flags",["^ ","^V",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^T","^S","^O","^Q"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","cljs/stacktrace.cljc"],"~:compiled-at",1619103367607,"~:resource-name","cljs/stacktrace.cljc","~:warnings",[],"~:source",";; Copyright (c) Rich Hickey. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file epl-v10.html at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns cljs.stacktrace\n  (:require #?@(:clj  [[cljs.util :as util]\n                       [clojure.java.io :as io]]\n                :cljs [[goog.string :as gstring]])\n            [clojure.string :as string])\n  #?(:clj (:import [java.util.regex Pattern]\n                   [java.io File])))\n\n(defmulti parse-stacktrace\n  \"Parse a JavaScript stacktrace string into a canonical data form. The\n  arguments:\n\n  repl-env - the repl environment, an optional map with :host and :port keys\n             if the stacktrace includes url, not file references\n  st       - the original stacktrace string to parse\n  err      - an error map. :ua-product key defines the type of stacktrace parser\n             to use, for example :chrome\n  opts     - additional options. :output-dir maybe given in this argument if\n             :host and :port do not apply, for example, a file path\n\n  The canonical stacktrace representation can easily be mapped to a\n  ClojureScript one see mapped-stacktrace and mapped-stacktrace-str\"\n  (fn [repl-env st err opts] (:ua-product err)))\n\n(defn parse-int [s]\n  #?(:clj  (Long/parseLong s)\n     :cljs (js/parseInt s 10)))\n\n(defn starts-with?\n  #?(:cljs {:tag boolean})\n  [^String s0 s1]\n  #?(:clj  (.startsWith s0 s1)\n     :cljs (gstring/startsWith s0 s1)))\n\n(defn ends-with?\n  #?(:cljs {:tag boolean})\n  [^String s0 s1]\n  #?(:clj  (.endsWith s0 s1)\n     :cljs (gstring/endsWith s0 s1)))\n\n(defn string->regex [s]\n  #?(:clj  (Pattern/compile s)\n     :cljs (js/RegExp. s)))\n\n(defn output-directory [opts]\n  #?(:clj  (util/output-directory opts)\n     :cljs (or (:output-dir opts) \"out\")))\n\n(defmethod parse-stacktrace :default\n  [repl-env st err opts] st)\n\n(defn parse-file-line-column [flc]\n  (if-not (re-find #\":\" flc)\n    [flc nil nil]\n    (let [xs (string/split flc #\":\")\n          [pre [line column]]\n          (reduce\n            (fn [[pre post] [x i]]\n              (if (<= i 2)\n                [pre (conj post x)]\n                [(conj pre x) post]))\n            [[] []] (map vector xs (range (count xs) 0 -1)))\n          file (string/join \":\" pre)]\n      [(cond-> file\n         (starts-with? file \"(\") (string/replace \"(\" \"\"))\n       (parse-int\n         (cond-> line\n           (ends-with? line \")\") (string/replace \")\" \"\")))\n       (parse-int\n         (cond-> column\n           (ends-with? column \")\") (string/replace \")\" \"\")))])))\n\n(defn parse-file\n  \"Given a browser file url convert it into a relative path that can be used\n   to locate the original source.\"\n  [{:keys [host host-port port] :as repl-env} file {:keys [asset-path] :as opts}]\n  (let [urlpat (if host\n                 (string->regex\n                   (str \"http://\" host \":\" (or host-port port) \"/\"))\n                 \"\")\n        match  (if host\n                 (re-find urlpat file)\n                 (contains? opts :output-dir))]\n    (if match\n      (-> file\n        (string/replace urlpat \"\")\n        (string/replace\n          (string->regex\n            ;; if :asset-path specified drop leading slash\n            (str \"^\" (or (and asset-path (string/replace asset-path #\"^/\" \"\"))\n                         (output-directory opts)) \"/\"))\n          \"\"))\n      (if-let [asset-root (:asset-root opts)]\n        (string/replace file asset-root \"\")\n        (throw\n          (ex-info (str \"Could not relativize URL \" file)\n            {:type :parse-stacktrace\n             :reason :relativize-url}))))))\n\n;; -----------------------------------------------------------------------------\n;; Chrome Stacktrace\n\n(defn chrome-st-el->frame\n  [repl-env st-el opts]\n  (let [xs (-> st-el\n             (string/replace #\"\\s+at\\s+\" \"\")\n             (string/split #\"\\s+\"))\n        [function flc] (if (== 1 (count xs))\n                         [nil (first xs)]\n                         [(first xs) (last xs)])\n        [file line column] (parse-file-line-column flc)]\n    (if (and file function line column)\n      {:file (parse-file repl-env file opts)\n       :function (string/replace function #\"Object\\.\" \"\")\n       :line line\n       :column column}\n      (when-not (string/blank? function)\n        {:file nil\n         :function (string/replace function #\"Object\\.\" \"\")\n         :line nil\n         :column nil}))))\n\n(comment\n  (chrome-st-el->frame {:host \"localhost\" :port 9000}\n    \"\\tat cljs$core$ffirst (http://localhost:9000/out/cljs/core.js:5356:34)\" {})\n  )\n\n(defmethod parse-stacktrace :chrome\n  [repl-env st err opts]\n  (->> st\n    string/split-lines\n    (drop-while #(starts-with? % \"Error\"))\n    (take-while #(not (starts-with? % \"    at eval\")))\n    (map #(chrome-st-el->frame repl-env % opts))\n    (remove nil?)\n    vec))\n\n(comment\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/out/cljs/core.js:4258:8)\n    at Object.cljs$core$first [as first] (http://localhost:9000/out/cljs/core.js:4288:19)\n    at cljs$core$ffirst (http://localhost:9000/out/cljs/core.js:5356:34)\n    at http://localhost:9000/out/cljs/core.js:16971:89\n    at cljs.core.map.cljs$core$map__2 (http://localhost:9000/out/cljs/core.js:16972:3)\n    at http://localhost:9000/out/cljs/core.js:10981:129\n    at cljs.core.LazySeq.sval (http://localhost:9000/out/cljs/core.js:10982:3)\n    at cljs.core.LazySeq.cljs$core$ISeqable$_seq$arity$1 (http://localhost:9000/out/cljs/core.js:11073:10)\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/out/cljs/core.js:4239:13)\n    at Object.cljs$core$pr_sequential_writer [as pr_sequential_writer] (http://localhost:9000/out/cljs/core.js:28706:14)\"\n    {:ua-product :chrome}\n    nil)\n\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/js/cljs/core.js:4258:8)\n    at Object.cljs$core$first [as first] (http://localhost:9000/js/cljs/core.js:4288:19)\n    at cljs$core$ffirst (http://localhost:9000/js/cljs/core.js:5356:34)\n    at http://localhost:9000/js/cljs/core.js:16971:89\n    at cljs.core.map.cljs$core$map__2 (http://localhost:9000/js/cljs/core.js:16972:3)\n    at http://localhost:9000/js/cljs/core.js:10981:129\n    at cljs.core.LazySeq.sval (http://localhost:9000/js/cljs/core.js:10982:3)\n    at cljs.core.LazySeq.cljs$core$ISeqable$_seq$arity$1 (http://localhost:9000/js/cljs/core.js:11073:10)\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/js/cljs/core.js:4239:13)\n    at Object.cljs$core$pr_sequential_writer [as pr_sequential_writer] (http://localhost:9000/js/cljs/core.js:28706:14)\"\n    {:ua-product :chrome}\n    {:asset-path \"/js\"})\n\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/out/cljs/core.js:4259:8)\n    at Object.cljs$core$first [as first] (http://localhost:9000/out/cljs/core.js:4289:19)\n    at cljs$core$ffirst (http://localhost:9000/out/cljs/core.js:5357:18)\n    at eval (eval at <anonymous> (http://localhost:9000/out/clojure/browser/repl.js:23:272), <anonymous>:1:106)\n    at eval (eval at <anonymous> (http://localhost:9000/out/clojure/browser/repl.js:23:272), <anonymous>:9:3)\n    at eval (eval at <anonymous> (http://localhost:9000/out/clojure/browser/repl.js:23:272), <anonymous>:14:4)\n    at http://localhost:9000/out/clojure/browser/repl.js:23:267\n    at clojure$browser$repl$evaluate_javascript (http://localhost:9000/out/clojure/browser/repl.js:26:4)\n    at Object.callback (http://localhost:9000/out/clojure/browser/repl.js:121:169)\n    at goog.messaging.AbstractChannel.deliver (http://localhost:9000/out/goog/messaging/abstractchannel.js:142:13)\"\n    {:ua-product :chrome}\n    nil)\n\n  ;; Node.js example\n  (parse-stacktrace {}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:3999:8)\n    at Object.cljs$core$first [as first] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:4018:19)\n    at cljs$core$ffirst (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:5161:34)\n    at /home/my/cool/project/.cljs_bootstrap/cljs/core.js:16006:88\n    at cljs.core.map.cljs$core$IFn$_invoke$arity$2 (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:16007:3)\n    at cljs.core.LazySeq.sval (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:10244:109)\n    at cljs.core.LazySeq.cljs$core$ISeqable$_seq$arity$1 (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:10335:10)\n    at Object.cljs$core$seq [as seq] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:3980:13)\n    at Object.cljs$core$pr_sequential_writer [as pr_sequential_writer] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:28084:14)\n    at cljs.core.LazySeq.cljs$core$IPrintWithWriter$_pr_writer$arity$3 (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:28812:18)\"\n    {:ua-product :chrome}\n    {:output-dir \"/home/my/cool/project/.cljs_bootstrap\"})\n  )\n\n;; -----------------------------------------------------------------------------\n;; Safari Stacktrace\n\n(defn safari-st-el->frame\n  [repl-env st-el opts]\n  (let [[function flc] (if (re-find #\"@\" st-el)\n                         (string/split st-el #\"@\")\n                         [nil st-el])\n        [file line column] (parse-file-line-column flc)]\n    (if (and file function line column)\n      {:file (parse-file repl-env file opts)\n       :function (string/trim function)\n       :line line\n       :column column}\n      (when-not (string/blank? function)\n        {:file nil\n         :function (string/trim function)\n         :line nil\n         :column nil}))))\n\n(comment\n  (safari-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4259:17\" {})\n\n  (safari-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/js/cljs/core.js:4259:17\" {:asset-path \"js\"})\n  )\n\n(defmethod parse-stacktrace :safari\n  [repl-env st err opts]\n  (->> st\n    string/split-lines\n    (drop-while #(starts-with? % \"Error\"))\n    (take-while #(not (starts-with? % \"eval code\")))\n    (remove string/blank?)\n    (map #(safari-st-el->frame repl-env % opts))\n    (remove nil?)\n    vec))\n\n(comment\n  (parse-stacktrace {}\n    \"cljs$core$seq@out/cljs/core.js:3999:17\n    cljs$core$first@out/cljs/core.js:4018:22\n    cljs$core$ffirst@out/cljs/core.js:5161:39\n    global code\"\n    {:ua-product :safari}\n    {:output-dir \"out\"})\n\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4259:17\ncljs$core$first@http://localhost:9000/out/cljs/core.js:4289:22\ncljs$core$ffirst@http://localhost:9000/out/cljs/core.js:5357:39\nhttp://localhost:9000/out/cljs/core.js:16972:92\nhttp://localhost:9000/out/cljs/core.js:16973:3\nhttp://localhost:9000/out/cljs/core.js:10982:133\nsval@http://localhost:9000/out/cljs/core.js:10983:3\ncljs$core$ISeqable$_seq$arity$1@http://localhost:9000/out/cljs/core.js:11074:14\ncljs$core$seq@http://localhost:9000/out/cljs/core.js:4240:44\ncljs$core$pr_sequential_writer@http://localhost:9000/out/cljs/core.js:28707:17\ncljs$core$IPrintWithWriter$_pr_writer$arity$3@http://localhost:9000/out/cljs/core.js:29386:38\ncljs$core$pr_writer_impl@http://localhost:9000/out/cljs/core.js:28912:57\ncljs$core$pr_writer@http://localhost:9000/out/cljs/core.js:29011:32\ncljs$core$pr_seq_writer@http://localhost:9000/out/cljs/core.js:29015:20\ncljs$core$pr_sb_with_opts@http://localhost:9000/out/cljs/core.js:29078:24\ncljs$core$pr_str_with_opts@http://localhost:9000/out/cljs/core.js:29092:48\ncljs$core$pr_str__delegate@http://localhost:9000/out/cljs/core.js:29130:34\ncljs$core$pr_str@http://localhost:9000/out/cljs/core.js:29139:39\neval code\neval@[native code]\nhttp://localhost:9000/out/clojure/browser/repl.js:23:271\nclojure$browser$repl$evaluate_javascript@http://localhost:9000/out/clojure/browser/repl.js:26:4\nhttp://localhost:9000/out/clojure/browser/repl.js:121:173\ndeliver@http://localhost:9000/out/goog/messaging/abstractchannel.js:142:21\nxpcDeliver@http://localhost:9000/out/goog/net/xpc/crosspagechannel.js:733:19\nmessageReceived_@http://localhost:9000/out/goog/net/xpc/nativemessagingtransport.js:321:23\nfireListener@http://localhost:9000/out/goog/events/events.js:741:25\nhandleBrowserEvent_@http://localhost:9000/out/goog/events/events.js:862:34\nhttp://localhost:9000/out/goog/events/events.js:276:42\"\n    {:ua-product :safari}\n    nil)\n  )\n\n;; -----------------------------------------------------------------------------\n;; Firefox Stacktrace\n\n(defn firefox-clean-function [f]\n  (as-> f f\n    (cond\n      (string/blank? f) nil\n      (not= (.indexOf f \"</\") -1)\n      (let [idx (.indexOf f \"</\")]\n        (.substring f (+ idx 2)))\n      :else f)\n    (-> f\n      (string/replace #\"<\" \"\")\n      (string/replace #?(:clj #\"\\/\" :cljs (js/RegExp. \"\\\\/\")) \"\"))))\n\n(defn firefox-st-el->frame\n  [repl-env st-el opts]\n  (let [[function flc] (if (re-find #\"@\" st-el)\n                         (string/split st-el #\"@\")\n                         [nil st-el])\n        [file line column] (parse-file-line-column flc)]\n    (if (and file function line column)\n      {:file (parse-file repl-env file opts)\n       :function (firefox-clean-function function)\n       :line line\n       :column column}\n      (when-not (string/blank? function)\n        {:file nil\n         :function (firefox-clean-function function)\n         :line nil\n         :column nil}))))\n\n(comment\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4258:8\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.map</cljs$core$map__2/</<@http://localhost:9000/out/cljs/core.js:16971:87\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.map</cljs$core$map__2/</<@http://localhost:9000/out/cljs/core.js:16971:87\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.pr_str</cljs$core$pr_str@http://localhost:9000/out/cljs/core.js:29138:8\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.pr_str</cljs$core$pr_str__delegate@http://localhost:9000/out/cljs/core.js:29129:8\" {})\n  )\n\n(defmethod parse-stacktrace :firefox\n  [repl-env st err opts]\n  (->> st\n    string/split-lines\n    (drop-while #(starts-with? % \"Error\"))\n    (take-while #(= (.indexOf % \"> eval\") -1))\n    (remove string/blank?)\n    (map #(firefox-st-el->frame repl-env % opts))\n    (remove nil?)\n    vec))\n\n(comment\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4258:8\ncljs$core$first@http://localhost:9000/out/cljs/core.js:4288:9\ncljs$core$ffirst@http://localhost:9000/out/cljs/core.js:5356:24\ncljs.core.map</cljs$core$map__2/</<@http://localhost:9000/out/cljs/core.js:16971:87\ncljs.core.map</cljs$core$map__2/<@http://localhost:9000/out/cljs/core.js:16970:1\ncljs.core.LazySeq.prototype.sval/self__.s<@http://localhost:9000/out/cljs/core.js:10981:119\ncljs.core.LazySeq.prototype.sval@http://localhost:9000/out/cljs/core.js:10981:13\ncljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1@http://localhost:9000/out/cljs/core.js:11073:1\ncljs$core$seq@http://localhost:9000/out/cljs/core.js:4239:8\ncljs$core$pr_sequential_writer@http://localhost:9000/out/cljs/core.js:28706:4\ncljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3@http://localhost:9000/out/cljs/core.js:29385:8\ncljs$core$pr_writer_impl@http://localhost:9000/out/cljs/core.js:28911:8\ncljs$core$pr_writer@http://localhost:9000/out/cljs/core.js:29010:8\ncljs$core$pr_seq_writer@http://localhost:9000/out/cljs/core.js:29014:1\ncljs$core$pr_sb_with_opts@http://localhost:9000/out/cljs/core.js:29077:1\ncljs$core$pr_str_with_opts@http://localhost:9000/out/cljs/core.js:29091:23\ncljs.core.pr_str</cljs$core$pr_str__delegate@http://localhost:9000/out/cljs/core.js:29129:8\ncljs.core.pr_str</cljs$core$pr_str@http://localhost:9000/out/cljs/core.js:29138:8\n@http://localhost:9000/out/clojure/browser/repl.js line 23 > eval:1:25\n@http://localhost:9000/out/clojure/browser/repl.js line 23 > eval:1:2\nclojure$browser$repl$evaluate_javascript/result<@http://localhost:9000/out/clojure/browser/repl.js:23:267\nclojure$browser$repl$evaluate_javascript@http://localhost:9000/out/clojure/browser/repl.js:23:15\nclojure$browser$repl$connect/</<@http://localhost:9000/out/clojure/browser/repl.js:121:128\ngoog.messaging.AbstractChannel.prototype.deliver@http://localhost:9000/out/goog/messaging/abstractchannel.js:142:5\ngoog.net.xpc.CrossPageChannel.prototype.xpcDeliver@http://localhost:9000/out/goog/net/xpc/crosspagechannel.js:733:7\ngoog.net.xpc.NativeMessagingTransport.messageReceived_@http://localhost:9000/out/goog/net/xpc/nativemessagingtransport.js:321:1\ngoog.events.fireListener@http://localhost:9000/out/goog/events/events.js:741:10\ngoog.events.handleBrowserEvent_@http://localhost:9000/out/goog/events/events.js:862:1\ngoog.events.getProxy/f<@http://localhost:9000/out/goog/events/events.js:276:16\"\n    {:ua-product :firefox}\n    nil)\n  )\n\n;; -----------------------------------------------------------------------------\n;; Node.js Stacktrace\n\n(defmethod parse-stacktrace :nodejs\n  [repl-env st err {:keys [output-dir] :as opts}]\n  (letfn [(parse-source-loc-info [x]\n            (when (and x (not (string/blank? x)))\n              (parse-int x)))\n          (process-frame [frame-str]\n            (when-not (or (string/blank? frame-str)\n                          (nil? (re-find #\"^\\s+at\" frame-str)))\n              (let [frame-str (string/replace frame-str #\"\\s+at\\s+\" \"\")]\n                (when-not (string/starts-with? frame-str \"repl:\")\n                  (let [parts (string/split frame-str #\"\\s+\")\n                        [function file&line] (if (== 2 (count parts))\n                                                   [(first parts)\n                                                    (subs (second parts) 1\n                                                      (dec (count (second parts))))]\n                                                   [nil (first parts)])\n                        [file-part line-part col-part] (string/split file&line #\":\")]\n                    {:file     (if function\n                                 (cond-> file-part\n                                   output-dir\n                                   (string/replace\n                                     (str output-dir\n                                       #?(:clj File/separator :cljs \"/\"))\n                                     \"\"))\n                                 file-part)\n                     :function function\n                     :line     (parse-source-loc-info line-part)\n                     :column   (parse-source-loc-info col-part)})))))]\n    (->> (string/split st #\"\\n\")\n      (map process-frame)\n      (remove nil?)\n      vec)))\n\n(comment\n  (parse-stacktrace {}\n    \"Error: 1 is not ISeqable\n    at cljs$core$seq (.cljs_node_repl/cljs/core.cljs:1118:20)\n    at repl:1:65\n    at repl:9:4\n    at repl:17:3\n    at repl:22:4\n    at Object.exports.runInThisContext (vm.js:54:17)\n    at Domain.<anonymous> ([stdin]:41:34)\n    at Domain.run (domain.js:228:14)\n    at Socket.<anonymous> ([stdin]:40:25)\n    at emitOne (events.js:77:13)\"\n\n    {:ua-product :nodejs}\n    {:output-dir \".cljs_node_repl\"})\n  )\n\n;; -----------------------------------------------------------------------------\n;; Stacktrace Mapping\n\n(defn remove-ext [file]\n  (-> file\n    (string/replace #\"\\.js$\" \"\")\n    (string/replace #\"\\.cljs$\" \"\")\n    (string/replace #\"\\.cljc$\" \"\")\n    (string/replace #\"\\.clj$\" \"\")))\n\n(defn mapped-line-column-call\n  \"Given a cljs.source-map source map data structure map a generated line\n   and column back to the original line, column, and function called.\"\n  [sms file line column]\n  (let [source-map (get sms (symbol (string/replace (remove-ext file) \"/\" \".\")))]\n    ;; source maps are 0 indexed for columns\n    ;; multiple segments may exist at column\n    ;; the last segment seems most accurate\n    (letfn [(get-best-column [columns column]\n             (last (or (get columns\n                         (last (filter #(<= % (dec column))\n                                 (sort (keys columns)))))\n                     (second (first columns)))))\n           (adjust [mapped]\n             (vec (map #(%1 %2) [inc inc identity] mapped)))]\n     (let [default [line column nil]]\n       ;; source maps are 0 indexed for lines\n       (if-let [columns (get source-map (dec line))]\n         (adjust (map (get-best-column columns column) [:line :col :name]))\n         default)))))\n\n(defn mapped-frame\n  \"Given opts and a canonicalized JavaScript stacktrace frame, return the\n  ClojureScript frame.\"\n  [{:keys [function file line column]} sms opts]\n  (let [no-source-file?      (if-not file true (starts-with? file \"<\"))\n        [line' column' call] (if no-source-file?\n                               [line column nil]\n                               (mapped-line-column-call sms file line column))\n        file'                (when-not no-source-file?\n                               (if (ends-with? file \".js\")\n                                 (str (subs file 0 (- (count file) 3)) \".cljs\")\n                                 file))]\n    {:function function\n     :call     call\n     :file     (if no-source-file?\n                 (str \"NO_SOURCE_FILE\" (when file (str \" \" file)))\n                 file')\n     :line     line'\n     :column   column'}))\n\n(defn mapped-stacktrace\n  \"Given a vector representing the canonicalized JavaScript stacktrace\n   return the ClojureScript stacktrace. The canonical stacktrace must be\n   in the form:\n\n    [{:file <string>\n      :function <string>\n      :line <integer>\n      :column <integer>}*]\n\n   :file must be a URL path (without protocol) relative to :output-dir or a\n   identifier delimited by angle brackets. The returned mapped stacktrace will\n   also contain :url entries to the original sources if it can be determined\n   from the classpath.\"\n  ([stacktrace sms]\n   (mapped-stacktrace stacktrace sms nil))\n  ([stacktrace sms opts]\n   (letfn [(call->function [x]\n             (if (:call x)\n               (hash-map :function (:call x))\n               {}))\n           (call-merge [function call]\n             (merge-with\n               (fn [munged-fn-name unmunged-call-name]\n                 (if (= munged-fn-name\n                        (string/replace (munge unmunged-call-name) \".\" \"$\"))\n                   unmunged-call-name\n                   munged-fn-name))\n               function call))]\n     (let [mapped-frames (map (memoize #(mapped-frame % sms opts)) stacktrace)]\n       ;; take each non-nil :call and optionally merge it into :function one-level\n       ;; up to avoid replacing with local symbols, we only replace munged name if\n       ;; we can munge call symbol back to it\n       (vec (map call-merge\n              (map #(dissoc % :call) mapped-frames)\n              (concat (rest (map call->function mapped-frames)) [{}])))))))\n\n(defn mapped-stacktrace-str\n  \"Given a vector representing the canonicalized JavaScript stacktrace and a map\n  of library names to decoded source maps, print the ClojureScript stacktrace .\n  See mapped-stacktrace.\"\n  ([stacktrace sms]\n   (mapped-stacktrace-str stacktrace sms nil))\n  ([stacktrace sms opts]\n   (with-out-str\n     (doseq [{:keys [function file line column]}\n             (mapped-stacktrace stacktrace sms opts)]\n       (println \"\\t\"\n         (str (when function (str function \" \"))\n              \"(\" file (when line (str \":\" line))\n                       (when column (str \":\" column)) \")\"))))))\n\n(comment\n  (require '[cljs.closure :as cljsc]\n           '[clojure.data.json :as json]\n           '[cljs.source-map :as sm]\n           '[clojure.pprint :as pp])\n\n  (cljsc/build \"samples/hello/src\"\n    {:optimizations :none\n     :output-dir \"samples/hello/out\"\n     :output-to \"samples/hello/out/hello.js\"\n     :source-map true})\n\n  (def sms\n    {'hello.core\n     (sm/decode\n       (json/read-str\n         (slurp \"samples/hello/out/hello/core.js.map\")\n         :key-fn keyword))})\n\n  (pp/pprint sms)\n\n  ;; maps to :line 5 :column 24\n  (mapped-stacktrace\n    [{:file \"hello/core.js\"\n      :function \"first\"\n      :line 6\n      :column 0}]\n    sms {:output-dir \"samples/hello/out\"})\n\n  (mapped-stacktrace-str\n    [{:file \"hello/core.js\"\n      :function \"first\"\n      :line 6\n      :column 0}]\n    sms {:output-dir \"samples/hello/out\"})\n  )\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["js/cljs","js/cljs.stacktrace","js/cljs.stacktrace.parse-stacktrace","method-table__4654__auto__","cljs.core.atom","prefer-table__4655__auto__","method-cache__4656__auto__","cached-hierarchy__4657__auto__","hierarchy__4658__auto__","cljs.core.get","fexpr__27242","cljs.core/MultiFn","cljs.core.symbol","cljs.stacktrace/parse-stacktrace","repl-env","st","err","opts","cljs.stacktrace/parse-int","s","js/parseInt","cljs.stacktrace/starts-with?","s0","s1","goog.string/startsWith","cljs.stacktrace/ends-with?","goog.string/endsWith","cljs.stacktrace/string->regex","js/RegExp","cljs.stacktrace/output-directory","or__4160__auto__","cljs.stacktrace/parse-file-line-column","flc","cljs.core/not","cljs.core/re-find","vec__27300","cljs.core.nth","vec__27303","xs","clojure.string.split","pre","line","column","cljs.core.reduce","p__27319","p__27320","vec__27322","vec__27325","post","x","i","cljs.core.conj","cljs.core.map","cljs.core/vector","cljs.core.range","cljs.core/count","file","clojure.string.join","G__27339","clojure.string/replace","G__27342","G__27345","p__27351","p__27352","map__27355","cljs.core/--destructure-map","map__27356","cljs.stacktrace/parse-file","host","host-port","port","asset-path","urlpat","match","cljs.core/contains?","and__4149__auto__","temp__5733__auto__","asset-root","cljs.core.ex_info","cljs.stacktrace/chrome-st-el->frame","st-el","vec__27379","vec__27382","function","cljs.core/first","cljs.core/last","clojure.string/blank?","clojure.string/split-lines","p1__27406#","cljs.core.drop_while","p1__27407#","cljs.core.take_while","p1__27408#","cljs.core.remove","cljs.core/nil?","cljs.core/vec","cljs.stacktrace/safari-st-el->frame","vec__27425","vec__27428","clojure.string/trim","p1__27443#","p1__27444#","p1__27445#","cljs.stacktrace/firefox-clean-function","f","cljs.core.not_EQ_","idx","cljs.stacktrace/firefox-st-el->frame","vec__27470","vec__27473","p1__27494#","p1__27496#","cljs.core._EQ_","p1__27502#","p__27522","map__27524","output-dir","frame-str","clojure.string/starts-with?","vec__27582","vec__27585","parts","file&line","cljs.core.subs","cljs.core/second","file-part","line-part","col-part","G__27594","parse-source-loc-info","process-frame","cljs.stacktrace/remove-ext","cljs.stacktrace/mapped-line-column-call","sms","source-map","columns","p1__27606#","cljs.core.filter","cljs.core.sort","cljs.core/keys","mapped","p1__27607#","p2__27608#","cljs.core/inc","cljs.core/identity","default","adjust","get-best-column","p__27632","map__27634","cljs.stacktrace/mapped-frame","vec__27636","no-source-file?","line'","column'","call","file'","var_args","G__27647","cljs.stacktrace/mapped-stacktrace","js/Error","stacktrace","cljs.stacktrace.mapped_stacktrace","cljs.core/PersistentHashMap","cljs.core.merge_with","munged-fn-name","unmunged-call-name","cljs.core/munge","mapped-frames","p1__27643#","cljs.core/memoize","call-merge","p1__27644#","cljs.core.dissoc","cljs.core.concat","cljs.core/rest","call->function","G__27680","cljs.stacktrace/mapped-stacktrace-str","cljs.stacktrace.mapped_stacktrace_str","sb__4702__auto__","goog.string/StringBuffer","*print-newline*-orig-val__27689","cljs.core/*print-newline*","*print-fn*-orig-val__27690","cljs.core/*print-fn*","*print-newline*-temp-val__27691","*print-fn*-temp-val__27692","x__4703__auto__","seq__27693","cljs.core/seq","chunk__27694","count__27695","i__27696","map__27739","temp__5735__auto__","cljs.core/chunked-seq?","c__4591__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","map__27759","cljs.core/next","cljs.core.println"]],"~:used-vars",["^H",["~$cljs.stacktrace/starts-with?","~$cljs.stacktrace/safari-st-el->frame","~$cljs.core/rest","~$cljs.core/MultiFn","~$cljs.stacktrace/mapped-frame","~$cljs.stacktrace/firefox-st-el->frame","~$js/RegExp","~$cljs.stacktrace/parse-int","~$cljs.stacktrace/parse-stacktrace","~$clojure.string/split","~$clojure.string/blank?","~$cljs.core/=","~$cljs.core/take-while","~$js/cljs.stacktrace","~$cljs.core/drop-while","~$cljs.core/count","~$cljs.stacktrace/firefox-clean-function","~$cljs.core/dissoc","~$cljs.core/*print-newline*","~$cljs.stacktrace/ends-with?","~$cljs.core/chunk-rest","~$clojure.string/split-lines","~$cljs.core/concat","~$cljs.stacktrace/mapped-stacktrace-str","~$js/cljs","~$cljs.core/map","~$js/cljs.stacktrace.parse-stacktrace","~$cljs.stacktrace/mapped-line-column-call","~$cljs.core/-add-method","~$js/parseInt","~$cljs.core/remove","~$cljs.stacktrace/chrome-st-el->frame","~$cljs.stacktrace/mapped-stacktrace","~$cljs.core/symbol","~$cljs.core/re-find","~$cljs.stacktrace/parse-file","~$cljs.core/nil?","~$cljs.core/ex-info","~$cljs.core/println","~$clojure.string/replace","~$cljs.stacktrace/parse-file-line-column","~$cljs.stacktrace/string->regex","~$cljs.core/next","~$cljs.core/vec","~$goog.string/startsWith","~$cljs.core/*print-fn*","~$cljs.core/not","~$cljs.stacktrace/output-directory","~$clojure.string/trim","~$js/Error","~$cljs.stacktrace/remove-ext","~$goog.string/endsWith","~$cljs.core/chunked-seq?"]]],"~:cache-keys",["~#cmap",[["^15","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^T","~$goog.dom.HtmlElement"]]],["^15","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","~$goog.array","~$goog.asserts"]]],["^15","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T"]]],["^15","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","^2Q","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^15","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","^2R","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2U"]]],["^15","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","^2R"]]],["^15","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T"]]],["^15","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T"]]],["^15","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T"]]],["^15","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T"]]],["^15","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","^2R"]]],"~:SHADOW-TIMESTAMP",[1619028784000,1619028784000,1619028780000],["^15","cljs/stacktrace.cljc"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","^S","^O","^Q"]]],["^15","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","^2R","~$goog.reflect"]]],["^15","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","^2R","~$goog.fs.blob","^2V","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2X","^2Y","^2Z","^2["]]],["^15","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T"]]],["^15","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T"]]],["^15","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","^2Q","^2R","~$goog.html.SafeUrl","^2Z","^2[","^2U"]]],["^15","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","^2R","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^33","~$goog.html.SafeStyle","^35","^2W","~$goog.html.uncheckedconversions","^2Z","^2U"]]],["^15","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^15","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","^2Q","^2R","~$goog.dom.TagName","~$goog.dom.tags","^33","^39","~$goog.html.SafeStyleSheet","^35","^2W","^34","^2X","^2Y","~$goog.labs.userAgent.browser","^2T","^2Z","^2[","^2U"]]],["^15","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","^2T"]]],["^15","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","^2Q"]]],["^15","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^15","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","^2Q","^2R","^O","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^15","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T"]]],["^15","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T"]]],["^15","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",[]]],["^15","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","^2Q","^2T"]]],["^15","clojure/string.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","^S","^O","~$goog.string.StringBuffer"]]],["^15","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","~$goog.dom.safe","^3:","^2Z","^2U"]]],["^15","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T"]]],["^15","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","^2U"]]],["^15","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T"]]],["^15","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","^2Q","^2R","^37","~$goog.math"]]],["^15","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","^2R","^38","^33","^39","^3?","^35","^2W","^2Z","^2U","^2X"]]],["^15","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T"]]],["^15","cljs/core.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","~$goog.math.Long","~$goog.math.Integer","^O","^2T","^2Q","~$goog.Uri","^3H"]]],["^15","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","^2Z","^2[","^34","^2R"]]],["^15","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","^2Z","^39","^2[","^2Q","^2T","^2R","^2U"]]],["^15","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","^31"]]],["^15","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","^2R","^O"]]],["^15","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2L",["^ ","^2M",null,"^2N",["^H",[]],"^2O",["^T","^2R","^2["]]]]],"~:clj-info",["^ ","jar:file:/home/genesis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1619028778000,"jar:file:/home/genesis/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1619028777000,"jar:file:/home/genesis/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map.clj",1619028780000,"jar:file:/home/genesis/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map/base64_vlq.clj",1619028780000,"jar:file:/home/genesis/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/util.cljc",1619028780000,"jar:file:/home/genesis/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/env.cljc",1619028780000,"jar:file:/home/genesis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1619028778000,"jar:file:/home/genesis/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/inspect.clj",1619028777000,"jar:file:/home/genesis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1619028778000,"jar:file:/home/genesis/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/compiler.cljc",1619028780000,"jar:file:/home/genesis/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/reader_types.clj",1619028777000,"jar:file:/home/genesis/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/instant.clj",1619028780000,"jar:file:/home/genesis/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/default_data_readers.clj",1619028777000,"jar:file:/home/genesis/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/analyzer/impl.cljc",1619028780000,"jar:file:/home/genesis/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/js_deps.cljc",1619028780000,"jar:file:/home/genesis/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/core.cljc",1619028780000,"jar:file:/home/genesis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1619028778000,"jar:file:/home/genesis/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map/base64.clj",1619028780000,"jar:file:/home/genesis/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/errors.clj",1619028777000,"jar:file:/home/genesis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1619028778000,"jar:file:/home/genesis/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/externs.clj",1619028780000,"jar:file:/home/genesis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1619028778000,"jar:file:/home/genesis/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1619028778000,"jar:file:/home/genesis/.m2/repository/binaryage/devtools/1.0.3/devtools-1.0.3.jar!/devtools/defaults.clj",1619085235000,"jar:file:/home/genesis/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/tagged_literals.cljc",1619028780000,"jar:file:/home/genesis/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader.clj",1619028777000,"jar:file:/home/genesis/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/analyzer.cljc",1619028780000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","cljs/stacktrace.cljc","^7",9,"^8",5,"^9",9,"^:",20],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^O","^Q","^Q","^R","^Q","^S","^S","^T","^T"],"^U",["^H",["^V"]],"~:shadow/js-access-global",["^H",["RegExp","Error","parseInt"]],"^W",null,"~:defs",["^ ","~$output-directory",["^ ","~:protocol-inline",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",53,"^8",7,"^9",53,"^:",23,"~:arglists",["^Z",["~$quote",["^Z",[["~$opts"]]]]]],"^I","^2D","^6","cljs/stacktrace.cljc","^:",23,"~:method-params",["^Z",[["^4E"]]],"~:protocol-impl",null,"~:arglists-meta",["^Z",[null,null]],"^8",1,"~:variadic?",false,"^7",53,"~:ret-tag",["^H",["~$any","^R"]],"^9",53,"~:max-fixed-arity",1,"~:fn-var",true,"^4C",["^Z",["^4D",["^Z",[["^4E"]]]]]],"~$ends-with?",["^ ","^4B",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",43,"^8",7,"^9",43,"^:",17,"^4C",["^Z",["^4D",["^Z",[["~$s0","~$s1"]]]]],"~:tag","~$boolean"],"^I","^1T","^6","cljs/stacktrace.cljc","^:",17,"^4F",["^Z",[["^4O","^4P"]]],"^4G",null,"^4H",["^Z",[null,null]],"^8",1,"^4I",false,"^7",43,"^4J","^4R","^9",43,"^4L",2,"^4Q","^4R","^4M",true,"^4C",["^Z",["^4D",["^Z",[["^4O","^4P"]]]]]],"~$starts-with?",["^ ","^4B",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",37,"^8",7,"^9",37,"^:",19,"^4C",["^Z",["^4D",["^Z",[["^4O","^4P"]]]]],"^4Q","^4R"],"^I","^1A","^6","cljs/stacktrace.cljc","^:",19,"^4F",["^Z",[["^4O","^4P"]]],"^4G",null,"^4H",["^Z",[null,null]],"^8",1,"^4I",false,"^7",37,"^4J","^4R","^9",37,"^4L",2,"^4Q","^4R","^4M",true,"^4C",["^Z",["^4D",["^Z",[["^4O","^4P"]]]]]],"~$remove-ext",["^ ","^4B",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",443,"^8",7,"^9",443,"^:",17,"^4C",["^Z",["^4D",["^Z",[["~$file"]]]]]],"^I","^2G","^6","cljs/stacktrace.cljc","^:",17,"^4F",["^Z",[["^4U"]]],"^4G",null,"^4H",["^Z",[null,null]],"^8",1,"^4I",false,"^7",443,"^4J","^R","^9",443,"^4L",1,"^4M",true,"^4C",["^Z",["^4D",["^Z",[["^4U"]]]]]],"~$string->regex",["^ ","^4B",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",49,"^8",7,"^9",49,"^:",20,"^4C",["^Z",["^4D",["^Z",[["~$s"]]]]]],"^I","^2>","^6","cljs/stacktrace.cljc","^:",20,"^4F",["^Z",[["~$s"]]],"^4G",null,"^4H",["^Z",[null,null]],"^8",1,"^4I",false,"^7",49,"^4J","^1G","^9",49,"^4L",1,"^4M",true,"^4C",["^Z",["^4D",["^Z",[["~$s"]]]]]],"~$safari-st-el->frame",["^ ","^4B",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",212,"^8",7,"^9",212,"^:",26,"^4C",["^Z",["^4D",["^Z",[["~$repl-env","~$st-el","^4E"]]]]]],"^I","^1B","^6","cljs/stacktrace.cljc","^:",26,"^4F",["^Z",[["^4X","^4Y","^4E"]]],"^4G",null,"^4H",["^Z",[null,null]],"^8",1,"^4I",false,"^7",212,"^4J",["^H",["~$cljs.core/IMap","~$clj-nil"]],"^9",212,"^4L",3,"^4M",true,"^4C",["^Z",["^4D",["^Z",[["^4X","^4Y","^4E"]]]]]],"~$mapped-frame",["^ ","^4B",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",471,"^8",7,"^9",471,"^:",19,"^4C",["^Z",["^4D",["^Z",[[["^ ","~:keys",["~$function","^4U","~$line","~$column"]],"~$sms","^4E"]]]]],"~:doc","Given opts and a canonicalized JavaScript stacktrace frame, return the\n  ClojureScript frame."],"^I","^1E","^6","cljs/stacktrace.cljc","^:",19,"^4F",["^Z",[["~$p__27632","^55","^4E"]]],"^4G",null,"^4H",["^Z",[null,null]],"^8",1,"^4I",false,"^7",471,"^4J","^4Z","^9",471,"^4L",3,"^4M",true,"^4C",["^Z",["^4D",["^Z",[[["^ ","^51",["^52","^4U","^53","^54"]],"^55","^4E"]]]]],"^56","Given opts and a canonicalized JavaScript stacktrace frame, return the\n  ClojureScript frame."],"~$firefox-st-el->frame",["^ ","^4B",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",306,"^8",7,"^9",306,"^:",27,"^4C",["^Z",["^4D",["^Z",[["^4X","^4Y","^4E"]]]]]],"^I","^1F","^6","cljs/stacktrace.cljc","^:",27,"^4F",["^Z",[["^4X","^4Y","^4E"]]],"^4G",null,"^4H",["^Z",[null,null]],"^8",1,"^4I",false,"^7",306,"^4J",["^H",["^4Z","^4["]],"^9",306,"^4L",3,"^4M",true,"^4C",["^Z",["^4D",["^Z",[["^4X","^4Y","^4E"]]]]]],"~$firefox-clean-function",["^ ","^4B",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",294,"^8",7,"^9",294,"^:",29,"^4C",["^Z",["^4D",["^Z",[["~$f"]]]]]],"^I","^1Q","^6","cljs/stacktrace.cljc","^:",29,"^4F",["^Z",[["~$f"]]],"^4G",null,"^4H",["^Z",[null,null]],"^8",1,"^4I",false,"^7",294,"^4J","^R","^9",294,"^4L",1,"^4M",true,"^4C",["^Z",["^4D",["^Z",[["~$f"]]]]]],"~$chrome-st-el->frame",["^ ","^4B",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",111,"^8",7,"^9",111,"^:",26,"^4C",["^Z",["^4D",["^Z",[["^4X","^4Y","^4E"]]]]]],"^I","^24","^6","cljs/stacktrace.cljc","^:",26,"^4F",["^Z",[["^4X","^4Y","^4E"]]],"^4G",null,"^4H",["^Z",[null,null]],"^8",1,"^4I",false,"^7",111,"^4J",["^H",["^4Z","^4["]],"^9",111,"^4L",3,"^4M",true,"^4C",["^Z",["^4D",["^Z",[["^4X","^4Y","^4E"]]]]]],"~$mapped-line-column-call",["^ ","^4B",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",450,"^8",7,"^9",450,"^:",30,"^4C",["^Z",["^4D",["^Z",[["^55","^4U","^53","^54"]]]]],"^56","Given a cljs.source-map source map data structure map a generated line\n   and column back to the original line, column, and function called."],"^I","^20","^6","cljs/stacktrace.cljc","^:",30,"^4F",["^Z",[["^55","^4U","^53","^54"]]],"^4G",null,"^4H",["^Z",[null,null]],"^8",1,"^4I",false,"^7",450,"^9",450,"^4L",4,"^4M",true,"^4C",["^Z",["^4D",["^Z",[["^55","^4U","^53","^54"]]]]],"^56","Given a cljs.source-map source map data structure map a generated line\n   and column back to the original line, column, and function called."],"~$mapped-stacktrace-str",["^ ","^4B",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",528,"^8",7,"^9",528,"^:",28,"^4C",["^Z",["^4D",["^Z",[["~$stacktrace","^55"],["^5=","^55","^4E"]]]]],"^56","Given a vector representing the canonicalized JavaScript stacktrace and a map\n  of library names to decoded source maps, print the ClojureScript stacktrace .\n  See mapped-stacktrace.","~:top-fn",["^ ","^4I",false,"~:fixed-arity",3,"^4L",3,"^4F",[["^5=","^55"],["^5=","^55","^4E"]],"^4C",["^Z",[["^5=","^55"],["^5=","^55","^4E"]]],"^4H",["^Z",[null,null]]]],"^I","^1X","^6","cljs/stacktrace.cljc","^:",28,"^5>",["^ ","^4I",false,"^5?",3,"^4L",3,"^4F",[["^5=","^55"],["^5=","^55","^4E"]],"^4C",["^Z",[["^5=","^55"],["^5=","^55","^4E"]]],"^4H",["^Z",[null,null]]],"^4F",[["^5=","^55"],["^5=","^55","^4E"]],"^4G",null,"^5?",3,"^4H",["^Z",[null,null]],"^8",1,"^4I",false,"~:methods",[["^ ","^5?",2,"^4I",false,"^4Q","^4K"],["^ ","^5?",3,"^4I",false,"^4Q","^R"]],"^7",528,"^9",528,"^4L",3,"^4M",true,"^4C",["^Z",[["^5=","^55"],["^5=","^55","^4E"]]],"^56","Given a vector representing the canonicalized JavaScript stacktrace and a map\n  of library names to decoded source maps, print the ClojureScript stacktrace .\n  See mapped-stacktrace."],"~$mapped-stacktrace",["^ ","^4B",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",491,"^8",7,"^9",491,"^:",24,"^4C",["^Z",["^4D",["^Z",[["^5=","^55"],["^5=","^55","^4E"]]]]],"^56","Given a vector representing the canonicalized JavaScript stacktrace\n   return the ClojureScript stacktrace. The canonical stacktrace must be\n   in the form:\n\n    [{:file <string>\n      :function <string>\n      :line <integer>\n      :column <integer>}*]\n\n   :file must be a URL path (without protocol) relative to :output-dir or a\n   identifier delimited by angle brackets. The returned mapped stacktrace will\n   also contain :url entries to the original sources if it can be determined\n   from the classpath.","^5>",["^ ","^4I",false,"^5?",3,"^4L",3,"^4F",[["^5=","^55"],["^5=","^55","^4E"]],"^4C",["^Z",[["^5=","^55"],["^5=","^55","^4E"]]],"^4H",["^Z",[null,null]]]],"^I","^25","^6","cljs/stacktrace.cljc","^:",24,"^5>",["^ ","^4I",false,"^5?",3,"^4L",3,"^4F",[["^5=","^55"],["^5=","^55","^4E"]],"^4C",["^Z",[["^5=","^55"],["^5=","^55","^4E"]]],"^4H",["^Z",[null,null]]],"^4F",[["^5=","^55"],["^5=","^55","^4E"]],"^4G",null,"^5?",3,"^4H",["^Z",[null,null]],"^8",1,"^4I",false,"^5@",[["^ ","^5?",2,"^4I",false,"^4Q","^4K"],["^ ","^5?",3,"^4I",false]],"^7",491,"^9",491,"^4L",3,"^4M",true,"^4C",["^Z",[["^5=","^55"],["^5=","^55","^4E"]]],"^56","Given a vector representing the canonicalized JavaScript stacktrace\n   return the ClojureScript stacktrace. The canonical stacktrace must be\n   in the form:\n\n    [{:file <string>\n      :function <string>\n      :line <integer>\n      :column <integer>}*]\n\n   :file must be a URL path (without protocol) relative to :output-dir or a\n   identifier delimited by angle brackets. The returned mapped stacktrace will\n   also contain :url entries to the original sources if it can be determined\n   from the classpath."],"~$parse-stacktrace",["^ ","^5",["^ ","^6","cljs/stacktrace.cljc","^7",17,"^8",11,"^9",17,"^:",27,"^56","Parse a JavaScript stacktrace string into a canonical data form. The\n  arguments:\n\n  repl-env - the repl environment, an optional map with :host and :port keys\n             if the stacktrace includes url, not file references\n  st       - the original stacktrace string to parse\n  err      - an error map. :ua-product key defines the type of stacktrace parser\n             to use, for example :chrome\n  opts     - additional options. :output-dir maybe given in this argument if\n             :host and :port do not apply, for example, a file path\n\n  The canonical stacktrace representation can easily be mapped to a\n  ClojureScript one see mapped-stacktrace and mapped-stacktrace-str"],"^I","^1I","^6","cljs/stacktrace.cljc","^:",27,"^8",1,"^7",17,"^9",17,"^4Q","^1D","^56","Parse a JavaScript stacktrace string into a canonical data form. The\n  arguments:\n\n  repl-env - the repl environment, an optional map with :host and :port keys\n             if the stacktrace includes url, not file references\n  st       - the original stacktrace string to parse\n  err      - an error map. :ua-product key defines the type of stacktrace parser\n             to use, for example :chrome\n  opts     - additional options. :output-dir maybe given in this argument if\n             :host and :port do not apply, for example, a file path\n\n  The canonical stacktrace representation can easily be mapped to a\n  ClojureScript one see mapped-stacktrace and mapped-stacktrace-str"],"~$parse-int",["^ ","^4B",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",33,"^8",7,"^9",33,"^:",16,"^4C",["^Z",["^4D",["^Z",[["~$s"]]]]]],"^I","^1H","^6","cljs/stacktrace.cljc","^:",16,"^4F",["^Z",[["~$s"]]],"^4G",null,"^4H",["^Z",[null,null]],"^8",1,"^4I",false,"^7",33,"^4J","~$js","^9",33,"^4L",1,"^4M",true,"^4C",["^Z",["^4D",["^Z",[["~$s"]]]]]],"~$parse-file",["^ ","^4B",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",81,"^8",7,"^9",81,"^:",17,"^4C",["^Z",["^4D",["^Z",[[["^ ","^51",["~$host","~$host-port","~$port"],"^10","^4X"],"^4U",["^ ","^51",["~$asset-path"],"^10","^4E"]]]]]],"^56","Given a browser file url convert it into a relative path that can be used\n   to locate the original source."],"^I","^28","^6","cljs/stacktrace.cljc","^:",17,"^4F",["^Z",[["~$p__27351","^4U","~$p__27352"]]],"^4G",null,"^4H",["^Z",[null,null]],"^8",1,"^4I",false,"^7",81,"^4J","^R","^9",81,"^4L",3,"^4M",true,"^4C",["^Z",["^4D",["^Z",[[["^ ","^51",["^5F","^5G","^5H"],"^10","^4X"],"^4U",["^ ","^51",["^5I"],"^10","^4E"]]]]]],"^56","Given a browser file url convert it into a relative path that can be used\n   to locate the original source."],"~$parse-file-line-column",["^ ","^4B",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",60,"^8",7,"^9",60,"^:",29,"^4C",["^Z",["^4D",["^Z",[["~$flc"]]]]]],"^I","^2=","^6","cljs/stacktrace.cljc","^:",29,"^4F",["^Z",[["^5M"]]],"^4G",null,"^4H",["^Z",[null,null]],"^8",1,"^4I",false,"^7",60,"^4J","~$cljs.core/IVector","^9",60,"^4L",1,"^4M",true,"^4C",["^Z",["^4D",["^Z",[["^5M"]]]]]]],"^X",["^ ","^S","^S"],"~:cljs.analyzer/constants",["^ ","^U",["^H",["~:asset-root","~:output-dir","~:ua-product","~:safari","~:else","~:call","~:default","^I","^6","~:nodejs","~:type","~:port","~:function","^8","~:firefox","~:reason","~:asset-path","~:host","~:parse-stacktrace","^7","~:chrome","~:relativize-url","~:col","~:hierarchy","~:host-port"]],"~:order",["^67","^5R","^5V","^5Q","^62","^68","^5Y","^61","^5P","^5X","^60","^63","^65","^6","^5Z","^7","^8","^64","^5S","^5T","^5[","^5W","^66","^I","^5U"]],"^11",["^ ","^V",["^H",[]]],"^12",["^ "],"^13",["^T","^S","^O","^Q"]],"^L","^J","~:ns-specs",["^ "],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^2K",[["^6<","~:static-fns"],true,["^6<","~:shadow-tweaks"],null,["^6<","~:source-map-inline"],null,["^6<","~:elide-asserts"],false,["^6<","~:optimize-constants"],null,["^6<","^18"],null,["^6<","~:external-config"],null,["^6<","~:tooling-config"],null,["^6<","~:emit-constants"],null,["^6<","~:load-tests"],null,["^6<","~:form-size-threshold"],null,["^6<","~:data-readers"],null,["^6<","~:infer-externs"],"~:auto",["^6<","^1:"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^6<","~:fn-invoke-direct"],null,["^6<","~:source-map"],"/dev/null"]]]